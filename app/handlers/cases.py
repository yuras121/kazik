"""–ü–µ—Ä–µ–≥–ª—è–¥ –∫–µ–π—Å—ñ–≤."""

from __future__ import annotations

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from sqlalchemy import select

from app.config import get_settings
from app.db.base import get_session
from app.db.models import Case
from app.services import users

router = Router()


@router.message(Command("cases"))
async def cmd_cases(message: Message) -> None:
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ –∫–µ–π—Å—ñ–≤."""

    if message.from_user is None:
        return

    settings = get_settings()

    async with get_session() as session:
        user, _ = await users.ensure_user(
            session, tg_id=message.from_user.id, username=message.from_user.username
        )
        cases = await session.scalars(select(Case).order_by(Case.price))
        cases_list = cases.all()
        await session.commit()

    lines = ["üì¶ <b>–ö–µ–π—Å–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è:</b>"]
    for case in cases_list:
        locked = case.cp_requirement and user.cp < case.cp_requirement
        status = "üîì" if not locked else "üîí"
        requirement = f" ‚Ä¢ –ü–æ—Ç—Ä—ñ–±–Ω–æ CP ‚â• {case.cp_requirement}" if case.cp_requirement else ""
        lines.append(f"{status} <b>{case.name}</b> ({case.code}) ‚Äî {case.price} VUSD{requirement}")
    if settings.collector_case_cp_requirement:
        lines.append(f"Collector Case –¥–æ—Å—Ç—É–ø–Ω–∏–π –∑ {settings.collector_case_cp_requirement} CP.")

    await message.answer("\n".join(lines))
