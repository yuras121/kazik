"""–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä –¥–ª—è –±–æ—Ç–∞."""

from __future__ import annotations

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup


def cases_keyboard(cases: list[tuple[str, str]]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑—ñ —Å–ø–∏—Å–∫–æ–º –∫–µ–π—Å—ñ–≤."""

    rows = [[InlineKeyboardButton(text=name, callback_data=f"case:{code}")] for code, name in cases]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def inventory_item_keyboard(user_item_id: int) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è —à–≤–∏–¥–∫–∏—Ö –¥—ñ–π –Ω–∞–¥ –ø—Ä–µ–¥–º–µ—Ç–æ–º."""

    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="ü§ù –ü—Ä–æ–¥–∞—Ç–∏ –±–æ—Ç—É", callback_data=f"sell:{user_item_id}")],
            [InlineKeyboardButton(text="üì¶ –ù–∞ –º–∞—Ä–∫–µ—Ç", callback_data=f"list:{user_item_id}")],
        ]
    )


def market_navigation_keyboard(page: int, has_next: bool) -> InlineKeyboardMarkup:
    """–ü–æ—Å—Ç–æ—Ä—ñ–Ω–∫–æ–≤–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è –º–∞—Ä–∫–µ—Ç—É."""

    buttons: list[InlineKeyboardButton] = []
    if page > 1:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"market:{page - 1}"))
    if has_next:
        buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"market:{page + 1}"))

    if not buttons:
        buttons.append(InlineKeyboardButton(text="–û–Ω–æ–≤–∏—Ç–∏", callback_data=f"market:{page}"))

    return InlineKeyboardMarkup(inline_keyboard=[buttons])
